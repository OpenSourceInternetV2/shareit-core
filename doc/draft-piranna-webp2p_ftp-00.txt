INTERNET DRAFT                          Jesús Leganés Combarro "piranna"
Document: draft-piranna-webp2p_ftp-00                      (independent)


                            webp2p ftp

Abstract

    This draft describes a protocol by which client-side applications,
    running inside a web browser, can communicate with another web
    browsers to interchange files. The protocol supports listing the
    contents of the shared files on other peers and receiving updates
    on added and removed files, as well as retrieving individual
    documents.

Status of this Memo

    This Internet-Draft is work-in-progress.

Copyright Notice

    Copyright (c) 2013 the persons identified as the document authors.
    All rights reserved.

Table of Contents

    1. Introduction....................................................2
    2. Terminology.....................................................2
    3. Messages........................................................3
    5. References......................................................4
      5.1. Normative References........................................4
    5. Authors' addresses..............................................4


piranna                                                         [Page 1]
 
Internet-Draft              webp2p ftp                        March 2013


1.  Introduction

    This specification describes a protocol to transfer files using
    WebRTC DataChannels, but could be used on top of any other
    bi-directional transport like WebSockets or BoSH. It is based on
    JSON messages. The actions the interface exposes are:

        * fileslist.query: ask for the names of all the documents and
          subfolders currently shared by a peer

        * fileslist.send: send to the other peer our full list of shared
          documents and subfolders

        * fileslist.disableUpdates: set to the other peer to don't send
          us notifications when shared files changes

        * fileslist.added: notification of a new shared file

        * fileslist.deleted: notification of a deleted shared file

        * transfer.query: ask for a file fragment

        * transfer.send: send to the other peer a file fragment

    The exact details of these seven actions are described in this
    specification.

2. Terminology

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in RFC 2119 [WORDS].

    "SHOULD" and "SHOULD NOT" are appropriate when valid exceptions to a
    general requirement are known to exist or appear to exist, and it is
    infeasible or impractical to enumerate all of them.  However, they
    should not be interpreted as permitting implementors to fail to
    implement the general requirement when such failure would result in
    interoperability failure.


piranna                                                         [Page 2]

Internet-Draft               webp2p ftp                       March 2013


3. Messages

    Communication is done using a simplified version of JSON-RPC, using
    arrays to store the command in string format on the first position,
    and the arguments of that command in their most natural format
    (boolean, integer, string, object...) on the other ones. The array
    is stringified previously to be send. Also communication is done in
    a totally asynchronous way, not waiting for an answer and processing
    all the messages in the order they are being received.

    A query for the list of all the files shared by the other peer is
    achieved using the fileslist.query command with an OPTIONAL 'flags'
    argument in integer format, allowing several options to be send in a
    bitwise format. This options are:

        * SEND_UPDATES (1): set if we want to be notified when the list
          of files get updated. If we want to disable notifications
          after that, we can use the fileslist.disableUpdates command
          without arguments.

    The list of the files is send using the fileslist.send message. This
    message doesn't necessarily need to be attached to a previous
    fileslist.query command, being able to be send at any time. Its
    argument is an array of fileentry objects, having as attributes:

        * hash: unique ID of the file, obtained using an SHA-512 hash of
          the file content
        * path: path of the file inside the peer hierarchy
        * name: name of the file
        * size: size of the file
        * type: MIME-type of the file

    File updates are notified on a per-file basis, using the
    fileslist.added and fileslist.deleted for added and deleted files,
    respectively. Their only argument is the fileentry object of the
    added/deleted file, as described previously.

    File transfers are done requesting one file fragment at a time using
    the transfer.query command. This includes the file hash as first
    argument and the requested file chunk as the second one. Data is
    send back asynchronously using the transfer.send command, with the
    file hash as the first argument, the file chunk as the second one
    and the requested file data as the third one. The data is send as a
    binary string, that need to be converted back to a blob fragment by
    the receiver previously to be included in the being-downloaded file.


piranna                                                         [Page 3]

Internet-Draft              webp2p ftp                        March 2013


5. References

5.1. Normative References

    [WORDS]
        Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

6. Authors' addresses

    Jesús Leganés Combarro "piranna"
    (independent)

    Email: piranna@gmail.com


piranna                                                         [Page 4]