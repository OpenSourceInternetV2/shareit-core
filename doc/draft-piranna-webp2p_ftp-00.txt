INTERNET DRAFT                          Jesús Leganés Combarro "piranna"
Document: draft-piranna-webp2p_ftp-00                      (independent)


                            webp2p ftp

Abstract

    This draft describes a protocol by which two machines can
    interchange files over a bi-directional communications channel. The
    protocol supports listing the available files on other peers and
    receiving updates on added and removed ones, as well as retrieving
    individual documents.

Status of this Memo

    This Internet-Draft is work-in-progress.

Copyright Notice

    Copyright (c) 2013 the persons identified as the document authors.
    All rights reserved.

Table of Contents

    1. Introduction....................................................2
    2. Terminology.....................................................2
    3. Messages........................................................3
      3.1 Serialization and communication scheme.......................3
      3.2 Files list...................................................3
      3.3 Files transfers..............................................5
    4. Acknowledges....................................................5
    5. References......................................................5
    6. Authors' addresses..............................................6























piranna                                                         [Page 1]
 
Internet-Draft              webp2p ftp                        March 2013


1.  Introduction

    This specification describes a protocol to transfer files using
    a bi-directional communications channel. It is mainly focused on
    WebRTC DataChannels, but could be used as a WebSockets subprotocol
    or over any other bi-directional transport layer like BoSH or any of
    the HTML5 MessageChannels. It is based on JSON [JSON] messages. The
    actions the interface exposes are:

        * fileslist.query: ask for the names of all the documents and
          subfolders currently shared by a peer

        * fileslist.send: send to the other peer our full list of shared
          documents and subfolders

        * fileslist.disableUpdates: set to the other peer to don't send
          us notifications when shared files changes

        * fileslist.added: notification of a new shared file

        * fileslist.deleted: notification of a deleted shared file

        * transfer.query: ask for a file fragment

        * transfer.send: send to the other peer a file fragment

    The exact details of these seven actions are described in this
    specification.

2. Terminology

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in RFC 2119 [WORDS].

    "SHOULD" and "SHOULD NOT" are appropriate when valid exceptions to a
    general requirement are known to exist or appear to exist, and it is
    infeasible or impractical to enumerate all of them.  However, they
    should not be interpreted as permitting implementors to fail to
    implement the general requirement when such failure would result in
    interoperability failure.













piranna                                                         [Page 2]

Internet-Draft               webp2p ftp                       March 2013


3. Messages

3.1. Serialization and communication scheme

    Communication is done using a simplified version of JSON-RPC, using
    arrays to store the command in string format on the first position,
    and the arguments of that command in their most natural format
    (boolean, integer, string, object...) on the other ones. The array
    is stringified using the JSON format previously to be send. Ending
    'falsy' arguments (0, null, undefined, void...) are not added to the
    arguments list to earn bandwidth and should be filled ad-hoc by the
    receiver. Once the command is serialized, it would be like in the
    next example:

    ["command.name", true, "arg 2", 3.0, 4, [1,2,3,4,5], "6th argument"]

    On the receiver end, the JSON string would be parsed and an array
    with this items in the same order they were sended will be created.

    Communication is done in a totally asynchronous way, not waiting for
    an answer and processing all the messages in the order they are
    being received, no matter if a response was being waited from a
    previous request or not.

3.2. Files list

    A query for the list of all the files shared by the other peer is
    achieved using the 'fileslist.query command' with an OPTIONAL
    'flags' argument in integer format, allowing several options to be
    send in a bitwise format. This options are:

        * SEND_UPDATES (1): set if we want to be notified when the list
          of files get updated (unset by default).

          If we want to disable notifications after that, we can use the
          'fileslist.disableUpdates' command without arguments.

        * SMALL_FILES_ACCELERATOR (2): set if files content should be
          passed on the hash field instead of the real file hash when
          the file size is smaller that the hash length. This enable the
          posibility to the requester peer to fill this files directly
          instead of needing to do a new request to fetch its content,
          saving bandwidth.

          It's recommended to use this flags only when this files
          content is not protected by Intellectual Property laws or
          after user has agree to take full responsability over it.

    A prety-printed example message (enabling updates and small files
    accelerator) would be:

    ["fileslist.query", 3]


piranna                                                         [Page 3]

Internet-Draft              webp2p ftp                        March 2013


    The list of the files is send using the 'fileslist.send' message.
    This message doesn't necessarily need to be attached to a previous
    'fileslist.query' request, being able to be send at any time. Its
    argument is an array of fileentry objects, having as attributes:

        * hash: unique ID of the file, obtained using an SHA-512 hash of
          the file content
        * path: path of the file inside the peer hierarchy. If it's
          ommitted it will be considered as empty string
        * name: name of the file
        * size: size in bytes of the file. If ommitted file size will be
          considered as zero bytes
        * type: MIME-type of the file
        * charset: OPTIONAL field to indicate the data charset in case
          file data content is text. This field is not used by the
          specification, but can be useful for user agents.

    A pretty-printed example message with just one empty file would be:

    ["fileslist.send",
     [{"hash": "z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==",
       "path": "",
       "name": "empty.txt",
       "size": 0,
       "type": "text/plain"
      }
     ]
    ]

    File updates are notified on a per-file basis, using the
    'fileslist.added' and 'fileslist.deleted' for added and deleted
    files, respectively. Fileslist.added only argument is the fileentry
    object of the added file as described previously. On the other hand,
    the argument of fileslist.deleted is only the file hash.

    Pretty-printed example messages would be as:

    ["fileslist.added", {"hash": "z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==",
       "path": "",
       "name": "empty.txt",
       "size": 0,
       "type": "text/plain"
      }]
    ["fileslist.deleted", "z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg=="]










piranna                                                         [Page 4]

Internet-Draft              webp2p ftp                        March 2013


3.3. Files transfers

    File transfers are done requesting one file fragment at a time using
    the 'transfer.query' command. This includes the file hash as first
    argument and the requested file chunk as the second one. Requested
    chunks are expected to be inside the file range, starting at zero.
    The number of file chunks is calculated dividing the file size by
    the chunk length (currently 65536 bytes).

    Data is send back asynchronously using the 'transfer.send' command,
    with the file hash as the first argument, the file chunk as the
    second one and the requested file data fragment as the third one.
    The data is send as a binary string, that need to be converted back
    to a blob fragment by the receiver previously to be included in the
    downloading file. This binary string is encoded with the WebSockets
    default content type, that currently it is UTF-8.

    Pretty-printed example messages would be as:

    ["transfer.query",
     "z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==",
     0]
    ["transfer.send",
     "z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==",
     0, ""]

    User agents implementators can decide to don't do the real request
    and fill the file automatically when the file size is zero or the
    SMALL_FILES_ACCELERATOR flag have been set previously requesting
    the files list, having in fact the real file content instead of the
    hash.

    Transfer.query messages SHOULDN'T be done twice except in case we
    are sure the message was lost. In case a transfer.send message is
    received twice (from the same or different peers) for the same file
    hash and chunk, it's decission of the user agent what to do, but
    it's recommended to accept only the first one and ignore the others.

4. Acknowledges

    The author would like to thank to Luis López Fernández for the help
    offered in the redaction of this specification.

5. References

    [WORDS]
        Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

    [JSON]
        D. Crockford, "The application/json Media Type for JavaScript
        Object Notation (JSON)", RFC 4627, July 2006.


piranna                                                         [Page 5]

Internet-Draft              webp2p ftp                        March 2013


6. Authors' addresses

    Jesús Leganés Combarro "piranna"
    (independent)

    Email: piranna@gmail.com
















































piranna                                                         [Page 6]